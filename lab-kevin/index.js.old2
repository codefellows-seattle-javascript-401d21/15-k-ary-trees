
'use strict';

const Promise = require('bluebird');
const fs = Promise.promisifyAll(require('fs'), {suffix: 'Prom'});
const debug = require('debug')('http:index-file');
const Stack = require('./lib/stack');
const Tree = require('./lib/kary');

const asset =`${__dirname}/../assets/minimal.html`;

const parentStack = new Stack();
const htmlTree = new Tree();

fs.readFileProm(asset)
  .then(parseHtml)
  .catch(console.error);

function parseHtml(fileData) {

  let tempArr = [];
  let html = fileData.toString('utf8');

  let elements = html.replace(/\n/g,'').replace(/<([^>]+)>/g, '\n<$1>\n')
    .split('\n').filter(elm => elm.trim()).slice(1);

  elements.forEach(elm => {
    processElement(elm);
  });

  function processElement(data){

    let parent = parentStack.top ? parentStack.top.value : '';

    if ( /^<\/[^<]+>$/.test(data) ){    //closing tag 
      let val = parentStack.pop();
      tempArr.push([parent, val]);
      htmlTree.insertData(val, parent);
      return; 
    }

    if (/^<[^<]+>$/.test(data)){ //opening tag
      if(parentStack.top){
      parent = parentStack.top.next ? parentStack.top.next.value : '';
      let val = parentStack.top.value;
      htmlTree.insertData(val, parent); 
      }
      let data_set = {eleName: data.replace(/([<</>])/g, ''), textContent: null};
      parentStack.push(data_set);
      return;
    }
    
    parentStack.top.value.textContent = data;
    return;
  }

  console.log('temp array', tempArr);
  console.log('htmlTree', htmlTree );
  console.log('htmlTree', JSON.stringify(htmlTree) );


} 